// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SwapClosed extends ethereum.Event {
  get params(): SwapClosed__Params {
    return new SwapClosed__Params(this);
  }
}

export class SwapClosed__Params {
  _event: SwapClosed;

  constructor(event: SwapClosed) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SwapCompleted extends ethereum.Event {
  get params(): SwapCompleted__Params {
    return new SwapCompleted__Params(this);
  }
}

export class SwapCompleted__Params {
  _event: SwapCompleted;

  constructor(event: SwapCompleted) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SwapCreated extends ethereum.Event {
  get params(): SwapCreated__Params {
    return new SwapCreated__Params(this);
  }
}

export class SwapCreated__Params {
  _event: SwapCreated;

  constructor(event: SwapCreated) {
    this._event = event;
  }

  get swapId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get payToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get assetType(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class Unibond__swapListResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: i32;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: i32,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class Unibond__viewSwapResultValue0Struct extends ethereum.Tuple {
  get swapId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get creator(): Address {
    return this[2].toAddress();
  }

  get payToken(): Address {
    return this[3].toAddress();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get assetType(): i32 {
    return this[5].toI32();
  }

  get isOpen(): boolean {
    return this[6].toBoolean();
  }
}

export class Unibond extends ethereum.SmartContract {
  static bind(address: Address): Unibond {
    return new Unibond("Unibond", address);
  }

  UNIV3_NFT_POISTION_MANAGER(): Address {
    let result = super.call(
      "UNIV3_NFT_POISTION_MANAGER",
      "UNIV3_NFT_POISTION_MANAGER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_UNIV3_NFT_POISTION_MANAGER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "UNIV3_NFT_POISTION_MANAGER",
      "UNIV3_NFT_POISTION_MANAGER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergencyStop(): boolean {
    let result = super.call("emergencyStop", "emergencyStop():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergencyStop(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergencyStop", "emergencyStop():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  feeCollector(): Address {
    let result = super.call("feeCollector", "feeCollector():(address)", []);

    return result[0].toAddress();
  }

  try_feeCollector(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeCollector", "feeCollector():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  listIndex(): BigInt {
    let result = super.call("listIndex", "listIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_listIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("listIndex", "listIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportTokens(param0: Address): boolean {
    let result = super.call("supportTokens", "supportTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_supportTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportTokens",
      "supportTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapList(param0: BigInt): Unibond__swapListResult {
    let result = super.call(
      "swapList",
      "swapList(uint256):(uint256,uint256,address,address,uint256,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Unibond__swapListResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toBoolean()
    );
  }

  try_swapList(param0: BigInt): ethereum.CallResult<Unibond__swapListResult> {
    let result = super.tryCall(
      "swapList",
      "swapList(uint256):(uint256,uint256,address,address,uint256,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Unibond__swapListResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toBoolean()
      )
    );
  }

  viewSwap(_swapId: BigInt): Unibond__viewSwapResultValue0Struct {
    let result = super.call(
      "viewSwap",
      "viewSwap(uint256):((uint256,uint256,address,address,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_swapId)]
    );

    return result[0].toTuple() as Unibond__viewSwapResultValue0Struct;
  }

  try_viewSwap(
    _swapId: BigInt
  ): ethereum.CallResult<Unibond__viewSwapResultValue0Struct> {
    let result = super.tryCall(
      "viewSwap",
      "viewSwap(uint256):((uint256,uint256,address,address,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_swapId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Unibond__viewSwapResultValue0Struct
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBatchSupportTokensCall extends ethereum.Call {
  get inputs(): AddBatchSupportTokensCall__Inputs {
    return new AddBatchSupportTokensCall__Inputs(this);
  }

  get outputs(): AddBatchSupportTokensCall__Outputs {
    return new AddBatchSupportTokensCall__Outputs(this);
  }
}

export class AddBatchSupportTokensCall__Inputs {
  _call: AddBatchSupportTokensCall;

  constructor(call: AddBatchSupportTokensCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddBatchSupportTokensCall__Outputs {
  _call: AddBatchSupportTokensCall;

  constructor(call: AddBatchSupportTokensCall) {
    this._call = call;
  }
}

export class ClearEmergencyCall extends ethereum.Call {
  get inputs(): ClearEmergencyCall__Inputs {
    return new ClearEmergencyCall__Inputs(this);
  }

  get outputs(): ClearEmergencyCall__Outputs {
    return new ClearEmergencyCall__Outputs(this);
  }
}

export class ClearEmergencyCall__Inputs {
  _call: ClearEmergencyCall;

  constructor(call: ClearEmergencyCall) {
    this._call = call;
  }
}

export class ClearEmergencyCall__Outputs {
  _call: ClearEmergencyCall;

  constructor(call: ClearEmergencyCall) {
    this._call = call;
  }
}

export class CloseSwapCall extends ethereum.Call {
  get inputs(): CloseSwapCall__Inputs {
    return new CloseSwapCall__Inputs(this);
  }

  get outputs(): CloseSwapCall__Outputs {
    return new CloseSwapCall__Outputs(this);
  }
}

export class CloseSwapCall__Inputs {
  _call: CloseSwapCall;

  constructor(call: CloseSwapCall) {
    this._call = call;
  }

  get _swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseSwapCall__Outputs {
  _call: CloseSwapCall;

  constructor(call: CloseSwapCall) {
    this._call = call;
  }
}

export class CreateSwapCall extends ethereum.Call {
  get inputs(): CreateSwapCall__Inputs {
    return new CreateSwapCall__Inputs(this);
  }

  get outputs(): CreateSwapCall__Outputs {
    return new CreateSwapCall__Outputs(this);
  }
}

export class CreateSwapCall__Inputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _payToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _assetType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateSwapCall__Outputs {
  _call: CreateSwapCall;

  constructor(call: CreateSwapCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveBatchSupportTokensCall extends ethereum.Call {
  get inputs(): RemoveBatchSupportTokensCall__Inputs {
    return new RemoveBatchSupportTokensCall__Inputs(this);
  }

  get outputs(): RemoveBatchSupportTokensCall__Outputs {
    return new RemoveBatchSupportTokensCall__Outputs(this);
  }
}

export class RemoveBatchSupportTokensCall__Inputs {
  _call: RemoveBatchSupportTokensCall;

  constructor(call: RemoveBatchSupportTokensCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveBatchSupportTokensCall__Outputs {
  _call: RemoveBatchSupportTokensCall;

  constructor(call: RemoveBatchSupportTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StopEmergencyCall extends ethereum.Call {
  get inputs(): StopEmergencyCall__Inputs {
    return new StopEmergencyCall__Inputs(this);
  }

  get outputs(): StopEmergencyCall__Outputs {
    return new StopEmergencyCall__Outputs(this);
  }
}

export class StopEmergencyCall__Inputs {
  _call: StopEmergencyCall;

  constructor(call: StopEmergencyCall) {
    this._call = call;
  }
}

export class StopEmergencyCall__Outputs {
  _call: StopEmergencyCall;

  constructor(call: StopEmergencyCall) {
    this._call = call;
  }
}

export class SwapWithETHCall extends ethereum.Call {
  get inputs(): SwapWithETHCall__Inputs {
    return new SwapWithETHCall__Inputs(this);
  }

  get outputs(): SwapWithETHCall__Outputs {
    return new SwapWithETHCall__Outputs(this);
  }
}

export class SwapWithETHCall__Inputs {
  _call: SwapWithETHCall;

  constructor(call: SwapWithETHCall) {
    this._call = call;
  }

  get _swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapWithETHCall__Outputs {
  _call: SwapWithETHCall;

  constructor(call: SwapWithETHCall) {
    this._call = call;
  }
}

export class SwapWithTokenCall extends ethereum.Call {
  get inputs(): SwapWithTokenCall__Inputs {
    return new SwapWithTokenCall__Inputs(this);
  }

  get outputs(): SwapWithTokenCall__Outputs {
    return new SwapWithTokenCall__Outputs(this);
  }
}

export class SwapWithTokenCall__Inputs {
  _call: SwapWithTokenCall;

  constructor(call: SwapWithTokenCall) {
    this._call = call;
  }

  get _swapId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapWithTokenCall__Outputs {
  _call: SwapWithTokenCall;

  constructor(call: SwapWithTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeWalletCall extends ethereum.Call {
  get inputs(): UpdateFeeWalletCall__Inputs {
    return new UpdateFeeWalletCall__Inputs(this);
  }

  get outputs(): UpdateFeeWalletCall__Outputs {
    return new UpdateFeeWalletCall__Outputs(this);
  }
}

export class UpdateFeeWalletCall__Inputs {
  _call: UpdateFeeWalletCall;

  constructor(call: UpdateFeeWalletCall) {
    this._call = call;
  }

  get _feeCollector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeWalletCall__Outputs {
  _call: UpdateFeeWalletCall;

  constructor(call: UpdateFeeWalletCall) {
    this._call = call;
  }
}
